/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.openkruise.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.openapi.models.V1Volume;
import io.kubernetes.client.openapi.models.V1LabelSelector;
import io.openkruise.client.models.KruiseAppsV1alpha1SidecarContainer;
import io.openkruise.client.models.KruiseAppsV1alpha1SidecarSetUpdateStrategy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SidecarSetSpec defines the desired state of SidecarSet
 */
@ApiModel(description = "SidecarSetSpec defines the desired state of SidecarSet")

public class KruiseAppsV1alpha1SidecarSetSpec {
  @SerializedName("containers")
  private List<KruiseAppsV1alpha1SidecarContainer> containers = null;

  @SerializedName("initContainers")
  private List<KruiseAppsV1alpha1SidecarContainer> initContainers = null;

  @SerializedName("namespace")
  private String namespace = null;

  @SerializedName("selector")
  private V1LabelSelector selector = null;

  @SerializedName("updateStrategy")
  private KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy = null;

  @SerializedName("volumes")
  private List<V1Volume> volumes = null;

  public KruiseAppsV1alpha1SidecarSetSpec containers(List<KruiseAppsV1alpha1SidecarContainer> containers) {
    this.containers = containers;
    return this;
  }

  public KruiseAppsV1alpha1SidecarSetSpec addContainersItem(KruiseAppsV1alpha1SidecarContainer containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<KruiseAppsV1alpha1SidecarContainer>();
    }
    this.containers.add(containersItem);
    return this;
  }

   /**
   * Containers is the list of sidecar containers to be injected into the selected pod
   * @return containers
  **/
  @ApiModelProperty(value = "Containers is the list of sidecar containers to be injected into the selected pod")
  public List<KruiseAppsV1alpha1SidecarContainer> getContainers() {
    return containers;
  }

  public void setContainers(List<KruiseAppsV1alpha1SidecarContainer> containers) {
    this.containers = containers;
  }

  public KruiseAppsV1alpha1SidecarSetSpec initContainers(List<KruiseAppsV1alpha1SidecarContainer> initContainers) {
    this.initContainers = initContainers;
    return this;
  }

  public KruiseAppsV1alpha1SidecarSetSpec addInitContainersItem(KruiseAppsV1alpha1SidecarContainer initContainersItem) {
    if (this.initContainers == null) {
      this.initContainers = new ArrayList<KruiseAppsV1alpha1SidecarContainer>();
    }
    this.initContainers.add(initContainersItem);
    return this;
  }

   /**
   * Containers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod
   * @return initContainers
  **/
  @ApiModelProperty(value = "Containers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod")
  public List<KruiseAppsV1alpha1SidecarContainer> getInitContainers() {
    return initContainers;
  }

  public void setInitContainers(List<KruiseAppsV1alpha1SidecarContainer> initContainers) {
    this.initContainers = initContainers;
  }

  public KruiseAppsV1alpha1SidecarSetSpec namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)
   * @return namespace
  **/
  @ApiModelProperty(value = "Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)")
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }

  public KruiseAppsV1alpha1SidecarSetSpec selector(V1LabelSelector selector) {
    this.selector = selector;
    return this;
  }

   /**
   * selector is a label query over pods that should be injected
   * @return selector
  **/
  @ApiModelProperty(value = "selector is a label query over pods that should be injected")
  public V1LabelSelector getSelector() {
    return selector;
  }

  public void setSelector(V1LabelSelector selector) {
    this.selector = selector;
  }

  public KruiseAppsV1alpha1SidecarSetSpec updateStrategy(KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
    return this;
  }

   /**
   * The sidecarset strategy to use to replace existing pods with new ones.
   * @return updateStrategy
  **/
  @ApiModelProperty(value = "The sidecarset strategy to use to replace existing pods with new ones.")
  public KruiseAppsV1alpha1SidecarSetUpdateStrategy getUpdateStrategy() {
    return updateStrategy;
  }

  public void setUpdateStrategy(KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy) {
    this.updateStrategy = updateStrategy;
  }

  public KruiseAppsV1alpha1SidecarSetSpec volumes(List<V1Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public KruiseAppsV1alpha1SidecarSetSpec addVolumesItem(V1Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<V1Volume>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

   /**
   * List of volumes that can be mounted by sidecar containers
   * @return volumes
  **/
  @ApiModelProperty(value = "List of volumes that can be mounted by sidecar containers")
  public List<V1Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<V1Volume> volumes) {
    this.volumes = volumes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KruiseAppsV1alpha1SidecarSetSpec kruiseAppsV1alpha1SidecarSetSpec = (KruiseAppsV1alpha1SidecarSetSpec) o;
    return Objects.equals(this.containers, kruiseAppsV1alpha1SidecarSetSpec.containers) &&
        Objects.equals(this.initContainers, kruiseAppsV1alpha1SidecarSetSpec.initContainers) &&
        Objects.equals(this.namespace, kruiseAppsV1alpha1SidecarSetSpec.namespace) &&
        Objects.equals(this.selector, kruiseAppsV1alpha1SidecarSetSpec.selector) &&
        Objects.equals(this.updateStrategy, kruiseAppsV1alpha1SidecarSetSpec.updateStrategy) &&
        Objects.equals(this.volumes, kruiseAppsV1alpha1SidecarSetSpec.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, initContainers, namespace, selector, updateStrategy, volumes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KruiseAppsV1alpha1SidecarSetSpec {\n");
    
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

