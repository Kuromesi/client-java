/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.openkruise.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.openapi.models.V1LabelSelector;
import io.kubernetes.client.custom.IntOrString;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Spec to control the desired behavior of daemon set rolling update.
 */
@ApiModel(description = "Spec to control the desired behavior of daemon set rolling update.")

public class KruiseAppsV1alpha1RollingUpdateDaemonSet {
  @SerializedName("maxSurge")
  private IntOrString maxSurge = null;

  @SerializedName("maxUnavailable")
  private IntOrString maxUnavailable = null;

  @SerializedName("partition")
  private Integer partition = null;

  @SerializedName("paused")
  private Boolean paused = null;

  @SerializedName("rollingUpdateType")
  private String rollingUpdateType = null;

  @SerializedName("selector")
  private V1LabelSelector selector = null;

  public KruiseAppsV1alpha1RollingUpdateDaemonSet maxSurge(IntOrString maxSurge) {
    this.maxSurge = maxSurge;
    return this;
  }

   /**
   * Only when type&#x3D;SurgingRollingUpdateType, it works. The maximum number of DaemonSet pods that can be scheduled above the desired number of pods during the update. Value can be an absolute number (ex: 5) or a percentage of the total number of DaemonSet pods at the start of the update (ex: 10%). The absolute number is calculated from the percentage by rounding up. This cannot be 0. The default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have 2 pods running at any given time. The update starts by starting replacements for at most 30% of those DaemonSet pods. Once the new pods are available it then stops the existing pods before proceeding onto other DaemonSet pods, thus ensuring that at most 130% of the desired final number of DaemonSet  pods are running at all times during the update.
   * @return maxSurge
  **/
  @ApiModelProperty(value = "Only when type=SurgingRollingUpdateType, it works. The maximum number of DaemonSet pods that can be scheduled above the desired number of pods during the update. Value can be an absolute number (ex: 5) or a percentage of the total number of DaemonSet pods at the start of the update (ex: 10%). The absolute number is calculated from the percentage by rounding up. This cannot be 0. The default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have 2 pods running at any given time. The update starts by starting replacements for at most 30% of those DaemonSet pods. Once the new pods are available it then stops the existing pods before proceeding onto other DaemonSet pods, thus ensuring that at most 130% of the desired final number of DaemonSet  pods are running at all times during the update.")
  public IntOrString getMaxSurge() {
    return maxSurge;
  }

  public void setMaxSurge(IntOrString maxSurge) {
    this.maxSurge = maxSurge;
  }

  public KruiseAppsV1alpha1RollingUpdateDaemonSet maxUnavailable(IntOrString maxUnavailable) {
    this.maxUnavailable = maxUnavailable;
    return this;
  }

   /**
   * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
   * @return maxUnavailable
  **/
  @ApiModelProperty(value = "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.")
  public IntOrString getMaxUnavailable() {
    return maxUnavailable;
  }

  public void setMaxUnavailable(IntOrString maxUnavailable) {
    this.maxUnavailable = maxUnavailable;
  }

  public KruiseAppsV1alpha1RollingUpdateDaemonSet partition(Integer partition) {
    this.partition = partition;
    return this;
  }

   /**
   * The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.
   * @return partition
  **/
  @ApiModelProperty(value = "The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.")
  public Integer getPartition() {
    return partition;
  }

  public void setPartition(Integer partition) {
    this.partition = partition;
  }

  public KruiseAppsV1alpha1RollingUpdateDaemonSet paused(Boolean paused) {
    this.paused = paused;
    return this;
  }

   /**
   * Indicates that the daemon set is paused and will not be processed by the daemon set controller.
   * @return paused
  **/
  @ApiModelProperty(value = "Indicates that the daemon set is paused and will not be processed by the daemon set controller.")
  public Boolean isPaused() {
    return paused;
  }

  public void setPaused(Boolean paused) {
    this.paused = paused;
  }

  public KruiseAppsV1alpha1RollingUpdateDaemonSet rollingUpdateType(String rollingUpdateType) {
    this.rollingUpdateType = rollingUpdateType;
    return this;
  }

   /**
   * Type is to specify which kind of rollingUpdate.
   * @return rollingUpdateType
  **/
  @ApiModelProperty(value = "Type is to specify which kind of rollingUpdate.")
  public String getRollingUpdateType() {
    return rollingUpdateType;
  }

  public void setRollingUpdateType(String rollingUpdateType) {
    this.rollingUpdateType = rollingUpdateType;
  }

  public KruiseAppsV1alpha1RollingUpdateDaemonSet selector(V1LabelSelector selector) {
    this.selector = selector;
    return this;
  }

   /**
   * A label query over nodes that are managed by the daemon set RollingUpdate. Must match in order to be controlled. It must match the node&#39;s labels.
   * @return selector
  **/
  @ApiModelProperty(value = "A label query over nodes that are managed by the daemon set RollingUpdate. Must match in order to be controlled. It must match the node's labels.")
  public V1LabelSelector getSelector() {
    return selector;
  }

  public void setSelector(V1LabelSelector selector) {
    this.selector = selector;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KruiseAppsV1alpha1RollingUpdateDaemonSet kruiseAppsV1alpha1RollingUpdateDaemonSet = (KruiseAppsV1alpha1RollingUpdateDaemonSet) o;
    return Objects.equals(this.maxSurge, kruiseAppsV1alpha1RollingUpdateDaemonSet.maxSurge) &&
        Objects.equals(this.maxUnavailable, kruiseAppsV1alpha1RollingUpdateDaemonSet.maxUnavailable) &&
        Objects.equals(this.partition, kruiseAppsV1alpha1RollingUpdateDaemonSet.partition) &&
        Objects.equals(this.paused, kruiseAppsV1alpha1RollingUpdateDaemonSet.paused) &&
        Objects.equals(this.rollingUpdateType, kruiseAppsV1alpha1RollingUpdateDaemonSet.rollingUpdateType) &&
        Objects.equals(this.selector, kruiseAppsV1alpha1RollingUpdateDaemonSet.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxSurge, maxUnavailable, partition, paused, rollingUpdateType, selector);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KruiseAppsV1alpha1RollingUpdateDaemonSet {\n");
    
    sb.append("    maxSurge: ").append(toIndentedString(maxSurge)).append("\n");
    sb.append("    maxUnavailable: ").append(toIndentedString(maxUnavailable)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    rollingUpdateType: ").append(toIndentedString(rollingUpdateType)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

