/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.openkruise.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.joda.time.DateTime;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ResourceDistributionCondition allows a row to be marked with additional information.
 */
@ApiModel(description = "ResourceDistributionCondition allows a row to be marked with additional information.")

public class KruiseAppsV1alpha1ResourceDistributionCondition {
  @SerializedName("failedNamespace")
  private List<String> failedNamespace = null;

  @SerializedName("lastTransitionTime")
  private DateTime lastTransitionTime = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("status")
  private String status = "";

  @SerializedName("type")
  private String type = "";

  public KruiseAppsV1alpha1ResourceDistributionCondition failedNamespace(List<String> failedNamespace) {
    this.failedNamespace = failedNamespace;
    return this;
  }

  public KruiseAppsV1alpha1ResourceDistributionCondition addFailedNamespaceItem(String failedNamespaceItem) {
    if (this.failedNamespace == null) {
      this.failedNamespace = new ArrayList<String>();
    }
    this.failedNamespace.add(failedNamespaceItem);
    return this;
  }

   /**
   * FailedNamespaces describe all failed namespaces when Status is False
   * @return failedNamespace
  **/
  @ApiModelProperty(value = "FailedNamespaces describe all failed namespaces when Status is False")
  public List<String> getFailedNamespace() {
    return failedNamespace;
  }

  public void setFailedNamespace(List<String> failedNamespace) {
    this.failedNamespace = failedNamespace;
  }

  public KruiseAppsV1alpha1ResourceDistributionCondition lastTransitionTime(DateTime lastTransitionTime) {
    this.lastTransitionTime = lastTransitionTime;
    return this;
  }

   /**
   * LastTransitionTime is the last time the condition transitioned from one status to another.
   * @return lastTransitionTime
  **/
  @ApiModelProperty(value = "LastTransitionTime is the last time the condition transitioned from one status to another.")
  public DateTime getLastTransitionTime() {
    return lastTransitionTime;
  }

  public void setLastTransitionTime(DateTime lastTransitionTime) {
    this.lastTransitionTime = lastTransitionTime;
  }

  public KruiseAppsV1alpha1ResourceDistributionCondition reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason describe human readable message indicating details about last transition.
   * @return reason
  **/
  @ApiModelProperty(value = "Reason describe human readable message indicating details about last transition.")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public KruiseAppsV1alpha1ResourceDistributionCondition status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the condition, one of True, False, Unknown.
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Status of the condition, one of True, False, Unknown.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public KruiseAppsV1alpha1ResourceDistributionCondition type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of ResourceDistributionCondition.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Type of ResourceDistributionCondition.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KruiseAppsV1alpha1ResourceDistributionCondition kruiseAppsV1alpha1ResourceDistributionCondition = (KruiseAppsV1alpha1ResourceDistributionCondition) o;
    return Objects.equals(this.failedNamespace, kruiseAppsV1alpha1ResourceDistributionCondition.failedNamespace) &&
        Objects.equals(this.lastTransitionTime, kruiseAppsV1alpha1ResourceDistributionCondition.lastTransitionTime) &&
        Objects.equals(this.reason, kruiseAppsV1alpha1ResourceDistributionCondition.reason) &&
        Objects.equals(this.status, kruiseAppsV1alpha1ResourceDistributionCondition.status) &&
        Objects.equals(this.type, kruiseAppsV1alpha1ResourceDistributionCondition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedNamespace, lastTransitionTime, reason, status, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KruiseAppsV1alpha1ResourceDistributionCondition {\n");
    
    sb.append("    failedNamespace: ").append(toIndentedString(failedNamespace)).append("\n");
    sb.append("    lastTransitionTime: ").append(toIndentedString(lastTransitionTime)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

